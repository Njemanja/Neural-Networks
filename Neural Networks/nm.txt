NIZOVI
niz=[2,6,9,10];red
niz2=[2;6;9;10];kolona
niz100=1:100;
nizneparni=1:2:100- od jedan do sto sa korakom 2
nizN=linespace(10,20,20)- od 10 do 20 sa 20 tacaka
niz(2)=20- promeni vednost
niz100(30:40)- uzmi podniz

MATRICE
matrica=[1,2,3,4;5,6,7,8];
matrica(2,3)
matrica(1:2, 3:4)- za izdvajanje
nule=zeros(5,10)
jedinice=ones(1,10)
mat3D=7*ones(3,4,5)

FUNKCIJE
length(niz100)-duzina niza
length(matrica3D)- vraca najvecu duzinu
size(mat3D, x)- sve dimenzije dobija, x sta nam treba red,kolona,dubina
numel(mat3D)- number of elements
niz>7- vraca 0,1 gde uslov nije i jeste ispunjen
niz(niz>7)
matrica(:,1)- sve redove, prva kolona
matrica(matrica>3)
matrica(1, matrica(1, :)>=3)- uzimamo iz prvog reda one koji su >= od 3
min(matrica)- minimum od svake kolone
min(mat')
min(mat, [], 2)- [] nicemu ne sluze, a 2 znaci da radimo minimum po kolonama
max(max(mat))- maksimum cele matrice
[vrednost,indeks]=max(mat);- glupost
mean(mat)- srednja vrednost svake kolone
mean(mat, 2)

PETLJE
for k=[2,6,8,0]
	disp(k)
end
lista=[2,5,6,8]
for k=lista
	disp(k)
end
for k:length(lista)
	disp(lista(k))
end
k=0;
while k<10
	disp(k)
	k=k+1;
end
a=3;
if a>5
	disp("x")
else
	disp("y")
end

GRAFIK
y=1:2:50
x=linspace(0,1, length(y))
figure
plot(x,y)-crtanje

t=0:0.1:10;
f1=sin(t)
f2=cos(t)
figure, hold all(sluzi da se sve sacuva)- crta i brise prethodno
plot(t,f1, "k--")- k-- isprekidana linija
plot(t,f2)
legend('sin(t)', 'cos(t)')- legenda, povezuje po redosledu
xlabel('Vreme [s]')- definisanje labela
ylabel('Funkcija')


PERCEPTRON
clc, clear, close all
rng(50)

%% Generesianje odbiraka
N = 500; % Broj odbiraka svake od klasa

% Generisanje odbiraka prve klase sa normlanom raspodelom
x1 = randn(1, N);
y1 = randn(1, N);
K1 = [x1; y1];

% Dodati generisanje odbiraka druge klase
x2 = randn(1, N) + 3;
y2 = randn(1, N) + 2;
K2 = [x2; y2];

%% Prikaz podataka
figure, hold all
plot(x1, y1, 'o');
plot(x2, y2, '*')

%% Kreiranje ulaza i izlaza perceptrona
% Ovde definisati matricu ulaza
ulaz = [K1, K2];

% Definisati vektor izlaza
izlaz = [ones(1, N), zeros(1, N)];

%% Obucavanje i testiranje
% Kreirati perceptron
per = perceptron('hardlim');

% Obuciti perceptron
per.trainParam.epochs = 100; % Maksimalan broj epoha treniranja
per.trainParam.goal = 1e-3; % Minimalna vrednost greske

view(per)

per = train(per, ulaz, izlaz);

% Testirati perceptron
pred = sim(per, ulaz);

% Prikazati matricu konfuzije
figure
plotconfusion(izlaz, pred)

%% Granica odlucivanja
Ntest = 500;
% Formirati ulazni vektor za testiranje
x1test = linspace(-4, 8, Ntest);
x2test = linspace(-3, 7, Ntest);
ulazTest = [];
for i = x2test
    ulazTest = [ulazTest, [x1test; i*ones(1, Ntest)]];
end

% Testirati obucen perceptron za formiran test skup
predTest = sim(per, ulazTest);
K1 = ulazTest(:, predTest == 1);
K2 = ulazTest(:, predTest == 0);

% Prikazati granicu odlucivanja
figure, hold all
plot(K1(1, :), K1(2, :), '.')
plot(K2(1, :), K2(2, :), '.')
plot(x1, y1, 'bo');
plot(x2, y2, 'ro')